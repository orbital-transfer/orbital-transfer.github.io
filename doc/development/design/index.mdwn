[[!meta title="Design"]]


# Bootstrapping

- Current
    * config:
        + Install directory
            + global install: no directory specified (so installs to `perl -V:sitelib`)
            + CI install: in `~/.orbital`.
                + Only when $ENV{CI} is true
            + default: relative to launch-site repo
    * steps:
        1. Install `cpm` (from vendor submodules) if not available
        2. Install `cpanm` using `cpm`.
        3. Install `App::scan_prereqs_cpanfile` using `cpanm`.
        4. Generate a `cpanfile` for every orbital-transfer submodule.
        5. Install dependencies from `cpanfile` for every orbital-transfer
           submodule using `cpm` then `cpanm`.
- Future
    * config:
        + Install to directory, upload to GitHub
            - upload to GitHub for cacheing
        + Install to directory at bootstrap time
            + determine the directory to install to using a class
    * steps: same as before
        + Perhaps need to generate cpanfile in each repo, only install and run
          `App::scan_prereqs_cpanfile` if `cpanfile` missing.
    * decreasing deps:
        + Need to outline a set of modules that are pure-Perl or can be translated
          to pure-Perl equivalents.
        + Some of these can be installed as the base dependencies of all the
          Orbital::Payload::* modules.
        + Others need to be set up to be installed based on context:
            + e.g., if loading on GitHub actions, then load everything needed there
        + Create a way of specifying features that require different sets of
          modules in a distribution.
        + Use a loader function to look up the features needed by a module and
          install if necessary.
        + Need to have a context for installation and loading which holds the
          directories for bootstrapping.

# Workflow

- Current:
    * Have two tasks:
        + Install
        + Test
    * What do these tasks do:
        + Determine the platform
            + Platforms:
                + Debian + apt,
                + macOS + Homebrew,
                + Windows + MSYS2.
        + Set up environment for everything (task: Install, Test).
            + Not great... this is specific to project-renard. It downloads the
              test data and sets an environment variable.
        + Each platform has a `_install` method (task: Install).
            + Debian + apt: Install `xvfb xauth`.
            + macOS + Homebrew:
              - Update Homebrew if needed (in non-CI environments).  This is
                necessary because Homebrew can be slow to update and this slows
                down the CI.  This might not be needed with newer versions of Homebrew.
              - Remove old Python: `python@2` to clean up a pre-installed
                package. This is (was?) specific to GitHub CI and was causing a
                conflict with Python 3.
              - [SKIPPED] Installing `xquartz`. This might have been for an older
                version of `gtk+3`. Note that this requires adding a tap to
                install a cask. Good thing it isn't needed now but being able
                to use a Homebrew tap is still important.
              - Install `pkg-config`. Often needed for finding the libraries.
              - Install openssl.
            + Windows + MSYS2:
              - Prepare MSYS2:
                  * TODO explain this more. It's complicated and hacky.
                  * TODO Disable checkspace
                  * TODO Update mirror list
                  * Update
                      + Install `pacman-mirrors`.
                      + Install `git`. Needed for below when fetching repos.
                      + TODO
              - Install build tools using pacman.
              - Install openssl package using pacman.
              - Copy `gcc` to `cc` and `mingw32-make` to `gmake`. Not sure if
                this is needed anymore. This makes Perl XS builds happy.
              - Create `C:\tmp` for `Data::UUID`. Not fixed yet!
              - Install Perl. Fixes `pl2bat` because `pl2bat.bat` isn't there.
                Installs `cpanm`, `cpm`, and some basic Perl modules.
                Includes my own patches to `cpm` to help it work in parallel (not ready for upstream).
                Not great as this is Perl specific and really should be part of
                non-platform code. Yikes!!!
        + Each platform has a `_pre_run` method (task: Install, Test)
            + Debian + apt:
                - Start the `Xvfb` sever.  Note that the reason why `Xvfb` is
                  also needed for the Install task is that running
                  `dzil listdeps` or `dzil build` needs a display because
                  with `project-renard/curie`, these commands load the code.
                  It runs Gtk3's init on loading the module! This is a bad
                  design, but worth working around just to prove that it can be
                  worked around. Run `DISPLAY= perl -MDevel::Hide=Gtk3 -S dzil listdeps`
                  to see the issues. This is also why errors while building
                  occur when these modules have not yet been installed in the
                  CI environment.
            + macOS + Homebrew: no-op.
            + Windows + MSYS2: no-op.
        + Each platform has an environment (task: Install, Test)
            + Debian + apt: sets `DISPLAY` to the `Xvfb` started above.
            + macOS + Homebrew:
                - This environment depends on the Homebrew prefix.
                - Adds to `PKG_CONFIG_PATH`: openssl, libffi
                - Adds to `PATH`: openssl, gettext.
                - Sets `ARCHFLAGS`: This has something to do with using a
                  macOS system Perl. Might not be needed with Homebrew. Bad
                  idea to use the macOS system Perl anyway.
            + Windows + MSYS2:
                - Set `MSYSTEM`: default is MINGW64.
                - Set `PATH`: to the default paths for that MSYSTEM.
                - Set `MSYS2_FC_CACHE_SKIP`: skip font cache for `fontconfig` package.
                - Add hack that modifies Perl linking for EUMM: yikes! This
                  isn't even in the same project! Yikes!!!
                - Set `ALIEN_BUILD_PKG_CONFIG` to prefer
                  `PkgConfig::CommandLine`: This should probably be upstream.
        + For each repo to install via depth-first walk (task: Install):
            + Get the repos using `git`. Note that `git` is already installed in most environments (except MSYS2 in the CI so that is why
              the `_install` for MSYS2 step installs `git`.
            + Install all the "native" dependencies of the repos first, then install the repos.
            + Each platform has an `install_packages` method to install the "native" packages (task: Install)
                + Debian + apt: TODO
                + macOS + Homebrew: TODO
                + Windows + MSYS2: TODO
            + Install the repo itself (task: Install)
                + Right now this is only for Perl distributions.
                    + via `Orbital::Payload::Env::Perl->apply_roles_to_repo`.
                    + More coupling! Yikes!
                + There is some caching here.
                + `$repo->install`.
        + Test the main repo (task: Test).
            + `$repo->run_test`.

- Future

TODO

# Workflow graph

- Task
    * Something that can be run.
        + `exec()` calls
        + code
    * Can succeed or fail.
        + A future?
    * Has dependencies.
    * Has inputs / outputs
        + Can be variables (e.g., parameters), directories, files
        + Outputs: stdout/stderr
    * Dependency graph:
        + e.g., Task B depends on A.output0
    * Tasks can have a mergeable role.
    * Tasks can have a retryable role.
    * Tasks can have subtasks?
        + A graph of subtasks?
    * Can have specialised tasks for CIs
        + e.g., on GitHub Actions, this would indicate which
          OS the task is running on
- Resources
    * lockable / mutex
        + Some resources can only be accessed for writing by one task at a time,
          e.g., installing CPAN modules to a library directory, running apt-get.
- Scheduling
    * <https://en.wikipedia.org/wiki/Coffman–Graham_algorithm>
    * <https://metacpan.org/pod/Bencher::Scenario::GraphTopologicalSortModules>
        + <https://metacpan.org/pod/Data::Graph::Util>
        + <https://metacpan.org/pod/Algorithm::Dependency>
- Workflow graph
    * DAG
        + Maybe in the future use strongly connected components to do
          condensation of any directed graph?
- `Task::Apt::Install`
    * Definition of `Task::Apt::Install`
        + `apt-get install [-y] [package-list]`
            + where `-y` option is boolean and optional.
            + where `package-list` option is array and required.
    * Given two tasks of type `Task::Apt::Install`,
        + Mutually exclusive: can not run multiple instances of
          `Task::Apt::Install` at the same time since they all require
          access to the `dpkg` lock.
            + note: the reason they are mutually exclusive should not be
              limited to just because they are the same type — we should look
              at the resources they are trying to lock
        + Mergeable: if the options other than `package-list` are the same,
          then they can be merged by merging the arrays of `package-list`.
- Package (or Pkg)
    * An installable unit.
    * What gets installed varies by package type (different packaging
      management systems).
        + e.g., libfoo on one system might be equivalent to separate libfoo and
          libfoo-dev packages on another
        + perhaps be able to identify categories of files installed
            + work with pkg-config to find `-I` and `-L`
    * Has dependencies.
    * Dependencies should be resolvable.
    * define data declaratively
        + it can be updated
        + it can be modeled
        + it does not have code
    * bug trackers / submission
        + preferred bug tracker and non-preferred alternatives (e.g., RT, [[GitHub|service/github]], [[GitLab|service/gitlab]], mailing lists)
- Data
    * RDF model?
        + provides graph
        + easy serialisation
        + existing ontologies
            + DOAP
                + https://en.wikipedia.org/wiki/DOAP
                + https://github.com/ewilderj/doap
            + SPDX
                + https://spdx.dev/
                + https://spdx.dev/spdx-examples-repo/
                + https://github.com/spdx/tools-python
        + link up with security advisories
            + CVE, Debian, etc.
            + [[About - cve-search - tool-set to perform local searches for known vulnerabilities|https://www.cve-search.org/about/]]
            + [[Vulnerability APIs|https://nvd.nist.gov/developers/vulnerabilities]]
            + https://stackoverflow.com/questions/37526701/cve-details-api-get-vulnerabilities-by-component
            + https://cve.mitre.org/cve/data_feeds.html
            + https://www.opencve.io/welcome
        + have modules provide RDF representation?
            + see also the old Moose + Semantic Web work
        + can track provenance of data
            + which graph it came from
            + was it entered via a tool or manually
            + maybe tie data changes to a commit?
    * Need to model command line tools
        + See PaSh <https://binpa.sh/>
            + https://nikos.vasilak.is/p/pash:osdi:2022.pdf
            + https://arxiv.org/pdf/2012.15422.pdf
        + can this be used to provide completion?
            + sub-commands
            + type-aware (getopt types, paths, etc.)
            + see zsh, bash completion
            + PowerShell ISE

# Organisation of project

- Payload:
    * Env (for Environment):
        + Language
        + DB (e.g., PostgreSQL, MySQL)
        + XWindows
    * Sys (for System):
        + Operating system
        + Package management system
    * Serv (for Service):
        + Usually a web service
        + e.g., GitHub, Sourceforge, Bitbucket, AppVeyor, Travis CI, Coveralls, Codecov
    * VCS: version control system
        + git, bzr, svn, cvs, etc.
- database
    * `pkg/`: packages. These can be from source (for FOSS code) or binary-only (for proprietary code).
        + e.g., `pkg/gui/gtk3`
            + inside of this create definitions such as [[!format txt """ [[!inline pagenames="doc/development/design/pkg-def.txt.ex" raw=yes ]] """]]
        + e.g., `pkg/perl/Gtk3` for <https://p3rl.org/Gtk3>
            + depends on `pkg/gui/gtk3` with feature :glib-introspection
        + Need a mapper from external packages to database.
            + e.g., `CPANPackage($Name) -> Pkg('main:pkg/perl/$Name')`
            + must be overrideable: in case a fork needs to be used or in the example of Perl, an <https://p3rl.org/Alt> module.
    * `sys/`: os  package manager + distribution
        + e.g., sys/os/{windows,linux,macos}
        + e.g., sys/dist/{debian,ubuntu}, sys/dist/fedora
        + e.g., sys/dist/{msys2,chocolatey}
            + for GitHub Actions, should use <https://github.com/msys2/setup-msys2>
        + e.g., sys/dist/{homebrew,fink,macports}
        + e.g., `sys/arch/{intel,arm}`
    * `env/`: language {perl,python,go}
        + env/perl/dist/Strawberry
            + have specialised data on how to install in different contexts
              (e.g., using GitHub Actions <https://github.com/shogo82148/actions-setup-perl>)
        + env/python/dist/Anaconda
    * `role/`: BLAS-interface, LAPACK-interface, XWindows-server, SQL-server, web-browser
        + e.g., BLAS: <https://www.mpi-magdeburg.mpg.de/projects/flexiblas>, <https://github.com/JuliaLinearAlgebra/libblastrampoline>.
            + with variants for index-32, index-64
            + some need Fortran, C, or C++
        + e.g., SSLeay, OpenSSL (fork of SSLeay), LibreSSL (fork of OpenSSL), wolfSSL (has OpenSSL compatibility interface)
        + e.g., role/server/xwindows: provided by Xorg, Xephyr, Xvfb
        + OpenGL version? Extensions <https://www.khronos.org/opengl/wiki/OpenGL_Extension>.
        + language compiler support? C99, C11, C++03, C++11, etc.?
- databases should be layered:
    * p5-Orbital-Transfer-Database distributes core database with OS, Language, Architecture files
        + actually stored in `orbital-transfer-database/core`
    * `orbital-transfer-database/main` contains database with packages such as `pkg/gui/gtk3`.

# CI of project modules

- Pull from `launch-site`.
- For every repo in { `GITHUB_SHA`, `cpanfile-git` } and `launch-site/vendor/`,
  checkout the version of that repo.

# Roadmap

- Query Orbital package database (can be specified using URL).
- Query Sys/Env package database.
    * Package database (can be specified using URL):
        + Env::Python
            + PyPI
            + local PyPI mirror
        + Env::Perl
            + CPAN (via MetaCPAN)
            + local DarkPAN
        + .deb: Debian apt, Ubuntu PPA
- Directory can be specified as local FS or remote URL.
- Query dependencies for directory.
    * Need language-specific scanner.
    * Read from meta files.
- List platforms supported.
- REPL for working with objects
- Tasks
    * Install package
    * Test package
    * Timing for tasks
- Given a repository and a set of plugins for that repository:
    * Find the matching GitHub repository for each remote
        + *if* plugin {Coveralls,Travis,GitHub CI},
          *then* use that GitHub name to find matching provider of metadata
        + e.g., for issues on GitHub, by default use the GitHub issues provider
          if they are enabled.
        + There may be other providers for example with a CPAN module, there
          could be issues at rt.cpan.org.
