[[!meta title="Design"]]


# Bootstrapping

- Current
    * config:
        + Install directory
            + global install: no directory specified (so installs to `perl -V:sitelib`)
            + CI install: in `~/.orbital`.
                + Only when $ENV{CI} is true
            + default: relative to launch-site repo
    * steps:
        1. Install `cpm` (from vendor submodules) if not available
        2. Install `cpanm` using `cpm`.
        3. Install `App::scan_prereqs_cpanfile` using `cpanm`.
        4. Generate a `cpanfile` for every orbital-transfer submodule.
        5. Install dependencies from `cpanfile` for every orbital-transfer
           submodule using `cpm` then `cpanm`.
- Future
    * config:
        + Install to directory, upload to GitHub
        + Install to directory at bootstrap time
            + determine the directory to install to using a class
    * steps: same as before
        + Perhaps need to generate cpanfile in each repo, only install and run
          `App::scan_prereqs_cpanfile` if `cpanfile` missing.
    * decreasing deps:
        + Need to outline a set of modules that are pure-Perl or can be translated
          to pure-Perl equivalents.
        + Some of these can be installed as the base dependencies of all the
          Orbital::Payload::* modules.
        + Others need to be set up to be installed based on context:
            + e.g., if loading on GitHub actions, then load everything needed there
        + Create a way of specifying features that require different sets of
          modules in a distribution.
        + Use a loader function to look up the features needed by a module and
          install if necessary.
        + Need to have a context for installation and loading which holds the
          directories for bootstrapping.

# Workflow graph

- Task
    * Something that can be run.
    * Has dependencies.
    * Has inputs / outputs
        + Can be parameters, directories, files
    * Can have specialised tasks for CIs
        + e.g., on GitHub Actions, this would indicate which
          OS the task is running on
- Resources
    * lockable / mutex
        + Some resources can only be accessed for writing by one task at a time,
          e.g., installing CPAN modules to a library directory, running apt-get.
- Scheduling
    * <https://en.wikipedia.org/wiki/Coffmanâ€“Graham_algorithm>
    * <https://metacpan.org/pod/Bencher::Scenario::GraphTopologicalSortModules>
        + <https://metacpan.org/pod/Data::Graph::Util>
        + <https://metacpan.org/pod/Algorithm::Dependency>

# Organisation of project

- Payload:
    * Environment: language
    * System:
        + Operating system
        + Package management system
    * Service:
        + Usually a web service
    * VCS: version control system
