[[!meta title="Continuous integration"]]

# Services

## GitHub Actions

- Reference: <https://docs.github.com/en/free-pro-team@latest/actions/reference>.

- Events
    * <https://docs.github.com/en/actions/reference/events-that-trigger-workflows>
    * Scheduled actions
        + <https://jasonet.co/posts/scheduled-actions/>
- Storing artifacts inside of a workflow <https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts>.
- Caching <https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows>.
    * <https://github.com/actions/cache/blob/main/examples.md>
    * Clearing cache: <https://stackoverflow.com/questions/63521430/clear-cache-in-github-actions>
    * <https://stackoverflow.com/questions/64226272/caching-npm-dependency-with-github-action>
    * <https://github.com/turtlebrowser/conan-cache>
- Container registry <https://github.blog/2020-09-01-introducing-github-container-registry/>
    * <https://docs.github.com/en/free-pro-team@latest/packages/getting-started-with-github-container-registry/about-github-container-registry>
- Problem matcher <https://github.com/actions/toolkit/blob/master/docs/problem-matchers.md>
- Runner OS <https://stackoverflow.com/questions/57946173/github-actions-run-step-on-specific-os>
- Debugging with SSH <https://github.com/marketplace/actions/debugging-with-tmate>, <https://github.com/mxschmitt/action-tmate>
    * Security: <https://github.com/mxschmitt/action-tmate/issues/2>
    * On failure: <https://gist.github.com/mikedep333/4b58843923ac909b48b95c99c32d03af>
- Calling another action from within another action
    * Examples
        + <https://github.com/msys2/setup-msys2/blob/master/main.js>
        + <https://github.com/lukka/get-cmake>
        + <https://github.com/marketplace/actions/run-vcpkg>
    * <https://github.community/t/call-an-action-from-another-action/17524/2>
    * <https://stackoverflow.com/questions/58860769/call-a-github-action-from-another-github-action>
    * <https://stackoverflow.com/questions/58611841/how-can-i-reference-other-actions-from-my-github-actions-action-yml-file>

Actions:

- MSYS2:
    * <https://github.com/actions/starter-workflows/issues/95>
    * <https://github.com/msys2/setup-msys2>
    * <https://github.com/actions/virtual-environments/issues/1525>
    * <https://github.com/actions/virtual-environments/issues/1572>

Examples:

- Perl
    * <https://perlmaven.com/github-actions-running-on-3-operating-systems>
    * <https://github.com/tobyink/p5-app-ghaprove/blob/master/.github/workflows/ci.yml>
        + Note: this uses separate stages for authoring the distribution and
          installing distribution. This way it is only authored once.
    * <https://github.com/graphviz-perl/GraphViz2/blob/master/.github/workflows/ci.yml>

## Travis CI

- Build stages <https://docs.travis-ci.com/user/build-stages/>.
- Storing artifacts inside of stages <https://docs.travis-ci.com/user/using-workspaces/>.
- <https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works>

## AppVeyor

- [[Environment variables - AppVeyor|https://www.appveyor.com/docs/environment-variables/]]
    * e.g., for build folder in PowerShell, use `$Env:APPVEYOR_BUILD_FOLDER`
- [[Software pre-installed on Windows build VMs - AppVeyor|https://www.appveyor.com/docs/windows-images-software/]]

## GitLab CI

- Cronjobs
    * <https://tonyxu.io/posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/>
    * <https://medium.com/@Maxime_/get-free-cron-jobs-with-gitlab-78f57e086453>

# Design of CI configuration

- Script
    * Bourne shell script
    * PowerShell script
- Script should be source-able using the same script for every CI service
  (because generating multiple scripts means changing those scripts). Then the
  script in turn should do something different based on which CI is being used
  (detected using the environment variables).

- Steps for CI should have information on how to retrieve modules/distributions.
  For example, inside a monorepo this is a directory.

## Cacheing

- Cacheing inside of a single CI system: this can be used for artifacts that
  are created internally to the build that can be rebuilt as long as inputs do
  not change.
    * e.g., for a given repo, the dependencies installed from CPAN
- Cacheing outside of the CI system: some build artifacts can be stored outside
  of the CI cacheing mechanism so that they can be shared across repos.
    1. Given
        1. Projects { P_A, P_B }
        2. Tasks { Task₀, Task₁ }
        3. OS *os* and architecture *arch* (determined by what the workflow is running on); (ignoring APIs/ABIs for now)
    2. VersionString(P_A) = V_A, VersionString(P_B) = V_B
        1. e.g., using `git describe --always`
    3. Task₀(P_A) has output A_O₀{V_A, *os*,*arch*}.
    4. Where Task₁(P_B) running on {*os*,*arch*} depends on A_O₀{V_A,*os*,*arch*}
        1. V_A for P_B is determined by turning a project dependency such as `P_B
           has-runtime-dependency-on (P_A where P_A source is git:A @ master)`
           into a concrete dependency.

  Specifically on GitHub:
    - Workflow running on every push, pull request:
        1. We can store A_O₀{V_A,*os*,*arch*} as a GitHub
           release under tag `continuous-build` when finished running
           Task₀(P_A) under the CI workflow for P_A for the default/release branch (e.g.,
           master).
        2. When running Task₁(P_B) under the CI workflow for P_B, retrieve A_O₀{V_A,*os*,*arch*}
           from GitHub releases if it exists. Otherwise build A_O₀{V_A,*os*,*arch*}
           inside of the CI workflow.
    - Workflow running on every tag creation:
        1. When running Task₀(P_A) under the CI workflow for P_A, delete all
           A_O₀{Version,Os,Arch} where Version < VersionString(P_A).

## Examples

<ul>
<li> Travis CI:
[[!format yml """ [[!inline pagenames="doc/development/continuous-integration/example/travis.yml" raw=yes ]] """]]
</li>
<li> AppVeyor:
[[!format yml """ [[!inline pagenames="doc/development/continuous-integration/example/appveyor.yml" raw=yes ]] """]]
</li>
<li>
GitHub Actions:
[[!format yml """ [[!inline pagenames="doc/development/continuous-integration/example/github-actions.yml" raw=yes ]] """]]
</li>
</ul>
