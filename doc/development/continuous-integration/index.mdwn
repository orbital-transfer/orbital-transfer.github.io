[[!meta title="Continuous integration"]]

# Services

## GitHub Actions

- Reference: <https://docs.github.com/en/free-pro-team@latest/actions/reference>.

- Storing artifacts inside of a workflow <https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts>.
- Caching <https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows>.
    * <https://github.com/actions/cache/blob/main/examples.md>
- Container registry <https://github.blog/2020-09-01-introducing-github-container-registry/>
    * <https://docs.github.com/en/free-pro-team@latest/packages/getting-started-with-github-container-registry/about-github-container-registry>
- Problem matcher <https://github.com/actions/toolkit/blob/master/docs/problem-matchers.md>
- Runner OS <https://stackoverflow.com/questions/57946173/github-actions-run-step-on-specific-os>

Actions:

- MSYS2:
    * <https://github.com/actions/starter-workflows/issues/95>
    * <https://github.com/msys2/setup-msys2>
    * <https://github.com/actions/virtual-environments/issues/1525>
    * <https://github.com/actions/virtual-environments/issues/1572>

Examples:

- Perl
    * <https://perlmaven.com/github-actions-running-on-3-operating-systems>
    * <https://github.com/tobyink/p5-app-ghaprove/blob/master/.github/workflows/ci.yml>
        + Note: this uses separate stages for authoring the distribution and
          installing distribution. This way it is only authored once.
    * <https://github.com/graphviz-perl/GraphViz2/blob/master/.github/workflows/ci.yml>

## Travis CI

- Build stages <https://docs.travis-ci.com/user/build-stages/>.
- Storing artifacts inside of stages <https://docs.travis-ci.com/user/using-workspaces/>.
- <https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works>

## AppVeyor

- [[Environment variables - AppVeyor|https://www.appveyor.com/docs/environment-variables/]]
- [[Software pre-installed on Windows build VMs - AppVeyor|https://www.appveyor.com/docs/windows-images-software/]]

# Design of CI configuration

- Script
    * Bourne shell script
    * PowerShell script
- Script should be source-able using the same script for every CI service
  (because generating multiple scripts means changing those scripts). Then the
  script in turn should do something different based on which CI is being used
  (detected using the environment variables).

- Steps for CI should have information on how to retrieve modules/distributions.
  For example, inside a monorepo this is a directory.

## Examples

<ul>
<li> Travis CI:
[[!format yml """ [[!inline pagenames="doc/development/continuous-integration/example/travis.yml" raw=yes ]] """]]
</li>
<li> AppVeyor:
[[!format yml """ [[!inline pagenames="doc/development/continuous-integration/example/appveyor.yml" raw=yes ]] """]]
</li>
<li>
GitHub Actions:
[[!format yml """ [[!inline pagenames="doc/development/continuous-integration/example/github-actions.yml" raw=yes ]] """]]
</li>
</ul>
